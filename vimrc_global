" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible        " Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing

" Now we set some defaults for the editor
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set smartcase           " Do smart case matching
set incsearch           " Incremental search
set hlsearch            " Highlight search by default
set autowrite           " Automatically save before commands like :next and :make
set hidden              " Hide buffers when they are abandoned
set mouse=a             " Enable mouse usage (all modes)

" modelines have historically been a source of security/resource
" vulnerabilities -- disable by default, even when 'nocompatible' is set
set nomodeline

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" Vim5 and later versions support syntax highlighting. Uncommenting the
" following enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" Backup file strategy
if has("vms")
  set nobackup          " do not keep a backup file, use versions instead
else
  set backup            " keep a backup file
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
" leaving this option to you put in your $HOME/.vimrc
"set background=dark

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif

"define :HighlightLongLines command to highlight the offending parts of
"lines that are longer than the specified length (defaulting to 80)
command! -nargs=? HighlightLongLines call s:HighlightLongLines('<args>')
function! s:HighlightLongLines(width)
    let targetWidth = a:width != '' ? a:width : 79
    if targetWidth > 0
        exec 'match Todo /\%>' . (targetWidth) . 'v/'
    else
        echomsg "Usage: HighlightLongLines [natural number]"
    endif
endfunction

"snipmate setup
"try
"  source ~/.vim/snippets/support_functions.vim
"catch
"  source $HOMEPATH\vimfiles\snippets\support_functions.vim
"endtry

autocmd vimenter * call s:SetupSnippets()
function! s:SetupSnippets()

    "if we're in a rails env then read in the rails snippets
    "if filereadable("./config/environment.rb")
        "call ExtractSnipsFile(expand("~/.vim/snippets/ruby-rails.snippets"), "ruby")
        "call ExtractSnipsFile(expand("~/.vim/snippets/eruby-rails.snippets"), "eruby")
    "endif

    call ExtractSnipsFile(expand("~/.vim/snippets/html.snippets"), "eruby")
    call ExtractSnipsFile(expand("~/.vim/snippets/html.snippets"), "xhtml")
    call ExtractSnipsFile(expand("~/.vim/snippets/html.snippets"), "php")
endfunction

" Don't use Ex mode, use Q for formatting
map Q gq

if has('gui_running')
  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Disabling verbose on CSApprox.
" This turn off an annoying warning on xterms with less than 88 colors and if
" vim wasn't compiled with gui support
let g:CSApprox_verbose_level = 0

" Adding some ProtectedRegions to AutoClose plugin
let g:AutoCloseProtectedRegions = ["String", "Comment", "Character", "rubyString"]

" Disabling some bugged filetypes ins syntax check
let g:syntastic_disabled_filetypes = ["sass"]

" Loading indentation styles to diferent filetypes
" All commented by default. Open vimrc_indentation_styles and change it!
if filereadable(glob("~/.vimrc_indentation_style"))
  source ~/.vimrc_indentation_style
end
